// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurfTicket.Infrastructure.Data;

#nullable disable

namespace SurfTicket.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250530133157_AuditFields-GiveDefaultValue")]
    partial class AuditFieldsGiveDefaultValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles_entity");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles_entity", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims_entity");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_entity_role_id");

                    b.ToTable("role_claims_entity", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims_entity");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_entity_user_id");

                    b.ToTable("user_claims_entity", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins_entity");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_entity_user_id");

                    b.ToTable("user_logins_entity", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles_entity");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_entity_role_id");

                    b.ToTable("user_roles_entity", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens_entity");

                    b.ToTable("user_tokens_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.MerchantEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_merchant_entity");

                    b.ToTable("merchant_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.MerchantUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_merchant_user_entity");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_merchant_user_entity_user_id");

                    b.HasIndex("MerchantId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_merchant_user_entity_merchant_id_user_id");

                    b.ToTable("merchant_user_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.PermissionAdminEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_permission_admin_entity");

                    b.ToTable("permission_admin_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.PermissionMenuEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MerchantUserId")
                        .HasColumnType("integer")
                        .HasColumnName("merchant_user_id");

                    b.Property<int>("PermissionAdminId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_admin_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_permission_menu_entity");

                    b.HasIndex("MerchantUserId")
                        .HasDatabaseName("ix_permission_menu_entity_merchant_user_id");

                    b.HasIndex("PermissionAdminId")
                        .HasDatabaseName("ix_permission_menu_entity_permission_admin_id");

                    b.ToTable("permission_menu_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.PlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DayDuration")
                        .HasColumnType("integer")
                        .HasColumnName("day_duration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_plan_entity");

                    b.ToTable("plan_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.SubscriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription_entity");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_subscription_entity_plan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_subscription_entity_user_id");

                    b.ToTable("subscription_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketBuyWindowEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_ticket_buy_window_entity");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_ticket_buy_window_entity_ticket_id");

                    b.ToTable("ticket_buy_window_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CanBuyFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("can_buy_from");

                    b.Property<DateTime?>("CanBuyUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("can_buy_until");

                    b.Property<DateTime>("CanScanFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("can_scan_from");

                    b.Property<DateTime>("CanScanUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("can_scan_until");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("EnableBuyAnytime")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_buy_anytime");

                    b.Property<bool>("EnableScanAnytime")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_scan_anytime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OneTimeBuyLimit")
                        .HasColumnType("integer")
                        .HasColumnName("one_time_buy_limit");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_entity");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_ticket_entity_venue_id");

                    b.ToTable("ticket_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketEntryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsScanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_scanned");

                    b.Property<string>("ScanCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scan_code");

                    b.Property<DateTime?>("ScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scanned_at");

                    b.Property<int>("TicketPurchaseId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_purchase_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_ticket_entry_entity");

                    b.HasIndex("TicketPurchaseId")
                        .HasDatabaseName("ix_ticket_entry_entity_ticket_purchase_id");

                    b.ToTable("ticket_entry_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketPurchaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchased_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.Property<int>("TicketPurchaseId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_purchase_id");

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_purchase_entity");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_ticket_purchase_entity_ticket_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ticket_purchase_entity_user_id");

                    b.ToTable("ticket_purchase_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketScanWindowEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_ticket_scan_window_entity");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_ticket_scan_window_entity_ticket_id");

                    b.ToTable("ticket_scan_window_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("text")
                        .HasColumnName("verify_code");

                    b.HasKey("Id")
                        .HasName("pk_users_entity");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.VenueEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int?>("VenueLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_location_id");

                    b.HasKey("Id")
                        .HasName("pk_venue_entity");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_venue_entity_merchant_id");

                    b.HasIndex("VenueLocationId")
                        .HasDatabaseName("ix_venue_entity_venue_location_id");

                    b.ToTable("venue_entity", (string)null);
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.VenueLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Latitude")
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_venue_location_entity");

                    b.ToTable("venue_location_entity", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_entity_roles_entity_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_entity_users_entity_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_entity_users_entity_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_entity_roles_entity_role_id");

                    b.HasOne("SurfTicket.Domain.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_entity_users_entity_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_entity_users_entity_user_id");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.MerchantUserEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.MerchantEntity", "Merchant")
                        .WithMany("MerchantUsers")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_merchant_user_entity_merchant_entity_merchant_id");

                    b.HasOne("SurfTicket.Domain.Models.UserEntity", "User")
                        .WithMany("MerchantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_merchant_user_entity_user_entity_user_id");

                    b.Navigation("Merchant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.PermissionMenuEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.MerchantUserEntity", "MerchantUser")
                        .WithMany("PermissionMenus")
                        .HasForeignKey("MerchantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_menu_entity_merchant_user_entity_merchant_user_id");

                    b.HasOne("SurfTicket.Domain.Models.PermissionAdminEntity", "PermissionAdmin")
                        .WithMany("PermissionMenus")
                        .HasForeignKey("PermissionAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_menu_entity_permission_admin_entity_permission_a");

                    b.Navigation("MerchantUser");

                    b.Navigation("PermissionAdmin");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.PlanEntity", b =>
                {
                    b.OwnsOne("SurfTicket.Domain.JsonSchema.PlanFeature", "Features", b1 =>
                        {
                            b1.Property<int>("PlanEntityId")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxCollabMerchant")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxOwnedMerchant")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxTicketsPerMerchant")
                                .HasColumnType("integer");

                            b1.Property<int>("ReportLevel")
                                .HasColumnType("integer");

                            b1.HasKey("PlanEntityId");

                            b1.ToTable("plan_entity");

                            b1.ToJson("features");

                            b1.WithOwner()
                                .HasForeignKey("PlanEntityId")
                                .HasConstraintName("fk_plan_entity_plan_entity_id");
                        });

                    b.Navigation("Features")
                        .IsRequired();
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.SubscriptionEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.PlanEntity", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_entity_plan_entity_plan_id");

                    b.HasOne("SurfTicket.Domain.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_entity_user_entity_user_id");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketBuyWindowEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.TicketEntity", "Ticket")
                        .WithMany("TicketBuyWindows")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_buy_window_entity_ticket_entity_ticket_id");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.VenueEntity", "Venue")
                        .WithMany("Tickets")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_entity_venue_entity_venue_id");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketEntryEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.TicketPurchaseEntity", "TicketPurchase")
                        .WithMany("TicketEntries")
                        .HasForeignKey("TicketPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_entry_entity_ticket_purchase_entity_ticket_purchase_");

                    b.Navigation("TicketPurchase");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketPurchaseEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.TicketEntity", "Ticket")
                        .WithMany("TicketPurchases")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_purchase_entity_ticket_entity_ticket_id");

                    b.HasOne("SurfTicket.Domain.Models.UserEntity", "User")
                        .WithMany("TicketPurchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_purchase_entity_user_entity_user_id");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketScanWindowEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.TicketEntity", "Ticket")
                        .WithMany("TicketScanWindows")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_scan_window_entity_ticket_entity_ticket_id");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.VenueEntity", b =>
                {
                    b.HasOne("SurfTicket.Domain.Models.MerchantEntity", "Merchant")
                        .WithMany("Venues")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_venue_entity_merchant_entity_merchant_id");

                    b.HasOne("SurfTicket.Domain.Models.VenueLocationEntity", "VenueLocation")
                        .WithMany()
                        .HasForeignKey("VenueLocationId")
                        .HasConstraintName("fk_venue_entity_venue_location_entity_venue_location_id");

                    b.Navigation("Merchant");

                    b.Navigation("VenueLocation");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.MerchantEntity", b =>
                {
                    b.Navigation("MerchantUsers");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.MerchantUserEntity", b =>
                {
                    b.Navigation("PermissionMenus");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.PermissionAdminEntity", b =>
                {
                    b.Navigation("PermissionMenus");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.PlanEntity", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketEntity", b =>
                {
                    b.Navigation("TicketBuyWindows");

                    b.Navigation("TicketPurchases");

                    b.Navigation("TicketScanWindows");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.TicketPurchaseEntity", b =>
                {
                    b.Navigation("TicketEntries");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.UserEntity", b =>
                {
                    b.Navigation("MerchantUsers");

                    b.Navigation("TicketPurchases");
                });

            modelBuilder.Entity("SurfTicket.Domain.Models.VenueEntity", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
